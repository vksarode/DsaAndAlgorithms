A simple solution is to iterate through all numbers from 2 to n – 1 and
for every number check if it divides n. If we find any number that divides, we return false.

2. Improved Method in Java to Check Prime
In this method, the check is done from 2 to n/2 as a number is not divisible by more than half its value.

static boolean isPrime(int n)
    {
        // Corner case
        if (n <= 1)
            return false;

        // Check from 2 to sqrt(n)
        for (int i = 2; i <= Math.sqrt(n); i++)
            if (n % i == 0)
                return false;

        return true;
    }

Time complexity: O(N)

Space complexity: O(1)

3. Optimized Java Code for Prime Number
Instead of checking till n, we can check till √n because a larger factor of n must
be a multiple of a smaller factor that has been already checked.
Complexity of the above method
Time complexity: O(√n)

Space complexity: O(1)


4. Most Optimized Method
The algorithm can be improved further by observing that all primes are of
the form 6k ± 1, with the exception of 2 and 3. This is because all integers can be
expressed as (6k + i) for some integer k and for i = -1, 0, 1, 2, 3, or 4.

Note:  2 divides (6k + 0), (6k + 2), (6k + 4)

3 divides (6k + 3)

So, a more efficient method is to test if n is divisible by 2 or 3,
then to check through all the numbers of form 6k ± 1 ≤ √n.
 This approach is 3 times faster than testing all numbers up to √n.
 static boolean isPrime(int n)
     {
         // Corner case
         if (n <= 1)
             return false;

         if (n == 2 || n == 3)
             return true;

         if (n % 2 == 0 || n % 3 == 0)
             return false;

         for (int i = 5; i < Math.sqrt(n); i = i + 6)
             if (n % i == 0 || n % (i + 2) == 0)
                 return false;

         return true;
     }

     Complexity of the above method
     Time complexity: O(√n)

     Space complexity: O(1)
